/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package http.rest.client;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockserver.integration.ClientAndServer.startClientAndServer;
import static org.mockserver.matchers.Times.exactly;
import static org.mockserver.model.HttpRequest.request;
import static org.mockserver.model.HttpResponse.response;

import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import org.junit.BeforeClass;
import org.junit.Test;
import org.mockserver.client.MockServerClient;
import org.mockserver.integration.ClientAndServer;
import org.mockserver.model.Header;
import org.mockserver.model.JsonBody;

import com.fasterxml.jackson.core.JsonProcessingException;

import c4c.http.rest.client.HttpRestClient;
import c4c.http.rest.client.HttpRestClientException;

public class HttpRestClientTest {

	private final static String TOKEN = "fgfkjkfsdlghdkgjklhkfgjhdkhgdkjfghdkjhggdkgg";
	private static ClientAndServer mockServer;

	private void createForValidAuthReturnToken() {
		new MockServerClient("127.0.0.1", 1080)
				.when(request().withMethod("POST").withPath("/login").withHeader("Content-type", "application/json")
						.withHeader("Accept", "application/json")
						.withBody(JsonBody.json("{username: 'admin', password: 'admin'}")), exactly(1))
				.respond(response().withStatusCode(200)
						.withHeaders(new Header("Content-Type", "application/json; charset=utf-8"),
								new Header("Cache-Control", "public, max-age=86400"))
						.withBody(JsonBody.json("{ token: '" + TOKEN + "' }")).withDelay(TimeUnit.SECONDS, 1));
	}

	private void createForValidPutReturnUpdated() {
		new MockServerClient("127.0.0.1", 1080)
				.when(request().withMethod("PUT").withPath("/user/admin").withHeader("Content-type", "application/json")
						.withHeader("Accept", "application/json")
						.withBody(JsonBody.json("{username: 'admin', password: 'newpassword'}")), exactly(1))
				.respond(response().withStatusCode(200)
						.withHeaders(new Header("Content-Type", "application/json; charset=utf-8"),
								new Header("Cache-Control", "public, max-age=86400"))
						.withBody(JsonBody.json("{username: 'admin', password: 'newpassword'}"))
						.withDelay(TimeUnit.SECONDS, 1));
	}

	private void createForValidPatchReturnUpdated() {
		new MockServerClient("127.0.0.1", 1080)
				.when(request().withMethod("PATCH").withPath("/user/admin")
						.withHeader("Content-type", "application/json").withHeader("Accept", "application/json")
						.withBody(JsonBody.json("{username: 'admin', 'newProp': 'newvalue'}")), exactly(1))
				.respond(response().withStatusCode(200)
						.withHeaders(new Header("Content-Type", "application/json; charset=utf-8"),
								new Header("Cache-Control", "public, max-age=86400"))
						.withBody(JsonBody.json("{username: 'admin', password: 'newpassword', 'newProp': 'newvalue'}"))
						.withDelay(TimeUnit.SECONDS, 1));
	}

	private void createForValidReturnHello() {
		new MockServerClient("127.0.0.1", 1080).when(request().withMethod("GET").withPath("/hello"), exactly(1))
				.respond(response().withStatusCode(200)
						.withHeaders(new Header("Content-Type", "application/json; charset=utf-8"),
								new Header("Cache-Control", "public, max-age=86400"))
						.withBody(JsonBody.json("{'data': 'Hello'}")).withDelay(TimeUnit.SECONDS, 1));

	}

	private void createForValidReturnParam() {
		new MockServerClient("127.0.0.1", 1080)
				.when(request().withMethod("GET").withPath("/param").withQueryStringParameter("param1", "10"),
						exactly(1))
				.respond(response().withStatusCode(200)
						.withHeaders(new Header("Content-Type", "application/json; charset=utf-8"),
								new Header("Cache-Control", "public, max-age=86400"))
						.withBody(JsonBody.json("{'param1': '10'}")).withDelay(TimeUnit.SECONDS, 1));

	}

	private void createForValidDelete() {
		new MockServerClient("127.0.0.1", 1080)
				.when(request().withMethod("DELETE").withPath("/param").withQueryStringParameter("param1", "10")
						.withHeader("header1", "10"), exactly(1))
				.respond(response().withStatusCode(200)
						.withHeaders(new Header("Content-Type", "application/json; charset=utf-8"),
								new Header("Cache-Control", "public, max-age=86400"))
						.withBody(JsonBody.json("{'param1': '10'}")).withDelay(TimeUnit.SECONDS, 1));

	}

	private void createForValidReturnParamAndCustomHeader() {
		new MockServerClient("127.0.0.1", 1080)
				.when(request().withMethod("GET").withPath("/param").withQueryStringParameter("param1", "10")
						.withHeader("header1", "10"), exactly(1))
				.respond(response().withStatusCode(200)
						.withHeaders(new Header("Content-Type", "application/json; charset=utf-8"),
								new Header("Cache-Control", "public, max-age=86400"))
						.withBody(JsonBody.json("{'param1': '10'}")).withDelay(TimeUnit.SECONDS, 1));

	}

	@BeforeClass
	public static void startServer() {
		mockServer = startClientAndServer(1080);
	}

	@Test
	public void test_login_with_post()
			throws HttpRestClientException, URISyntaxException, UnsupportedEncodingException, JsonProcessingException {
		createForValidAuthReturnToken();
		final HttpRestClient client = HttpRestClient.createDefault();
		final Map<String, String> payLoad = new HashMap<String, String>();
		payLoad.put("username", "admin");
		payLoad.put("password", "admin");
		final Map<String, String> strMap = new HashMap<String, String>();
		final Map<String, String> data = client.executePost("http://127.0.0.1:1080/login", payLoad, strMap.getClass());
		assertEquals(TOKEN, data.get("token"));
	}

	@Test
	public void test_update_user_with_patch()
			throws HttpRestClientException, URISyntaxException, UnsupportedEncodingException, JsonProcessingException {
		createForValidPatchReturnUpdated();
		final HttpRestClient client = HttpRestClient.createDefault();
		final Map<String, String> payLoad = new HashMap<String, String>();
		payLoad.put("username", "admin");
		payLoad.put("newProp", "newvalue");
		final Map<String, String> strMap = new HashMap<String, String>();
		final Map<String, String> data = client.executePatch("http://127.0.0.1:1080/user/admin", payLoad,
				strMap.getClass());
		assertEquals("newvalue", data.get("newProp"));
	}

	@Test
	public void test_update_user_with_put()
			throws HttpRestClientException, URISyntaxException, UnsupportedEncodingException, JsonProcessingException {
		createForValidPutReturnUpdated();
		final HttpRestClient client = HttpRestClient.createDefault();
		final Map<String, String> payLoad = new HashMap<String, String>();
		payLoad.put("username", "admin");
		payLoad.put("password", "newpassword");
		final Map<String, String> strMap = new HashMap<String, String>();
		final Map<String, String> data = client.executePut("http://127.0.0.1:1080/user/admin", payLoad,
				strMap.getClass());
		assertEquals("admin", data.get("username"));
	}

	@Test
	public void test_update_user_with_put_Logininfo_object()
			throws HttpRestClientException, URISyntaxException, UnsupportedEncodingException, JsonProcessingException {
		createForValidPutReturnUpdated();
		final HttpRestClient client = HttpRestClient.createDefault();
		final LoginInfo user = new LoginInfo();
		user.setUsername("admin");
		user.setPassword("newpassword");

		final Map<String, String> strMap = new HashMap<String, String>();
		final Map<String, String> data = client.executePut("http://127.0.0.1:1080/user/admin", user, strMap.getClass());
		assertEquals("admin", data.get("username"));
	}

	@Test
	public void test_login_with_post_with_String_Return()
			throws HttpRestClientException, URISyntaxException, UnsupportedEncodingException, JsonProcessingException {
		createForValidAuthReturnToken();
		final HttpRestClient client = HttpRestClient.createDefault();
		final Map<String, String> payLoad = new HashMap<String, String>();
		payLoad.put("username", "admin");
		payLoad.put("password", "admin");

		final String data = client.executePost("http://127.0.0.1:1080/login", payLoad, String.class);
		assertTrue(data.contains(TOKEN));
	}

	@Test
	public void test_get_with_url() throws Throwable {
		createForValidReturnHello();
		final HttpRestClient client = HttpRestClient.createDefault();
		final Map<String, String> strMap = new HashMap<String, String>();
		final Map<String, String> data = client.executeGet("http://127.0.0.1:1080/hello", strMap.getClass());
		assertEquals("Hello", data.get("data"));
	}

	@Test
	public void test_get_with_param() throws Throwable {
		createForValidReturnParam();
		final HttpRestClient client = HttpRestClient.createDefault();
		final Map<String, String> strMap = new HashMap<String, String>();
		strMap.put("param1", "10");
		final Map<String, String> data = client.executeGet("http://127.0.0.1:1080/param", strMap, strMap.getClass());
		assertEquals("10", data.get("param1"));
	}

	@Test
	public void test_get_with_param_header() throws Throwable {
		createForValidReturnParam();
		final HttpRestClient client = HttpRestClient.createDefault();
		final Map<String, String> strMap = new HashMap<String, String>();
		strMap.put("param1", "10");

		final Map<String, String> strHeader = new HashMap<String, String>();
		strHeader.put("header1", "10");

		final Map<String, String> data = client.executeGet("http://127.0.0.1:1080/param", strHeader, strMap,
				strMap.getClass());
		assertEquals("10", data.get("param1"));
	}

	@Test
	public void test_delete_with_param_header() throws Throwable {
		createForValidDelete();
		final HttpRestClient client = HttpRestClient.createDefault();
		final Map<String, String> strMap = new HashMap<String, String>();
		strMap.put("param1", "10");

		final Map<String, String> strHeader = new HashMap<String, String>();
		strHeader.put("header1", "10");

		final Map<String, String> data = client.executeDelete("http://127.0.0.1:1080/param", strHeader, strMap,
				strMap.getClass());
		assertEquals("10", data.get("param1"));
	}
}
